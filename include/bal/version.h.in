/*
 * version.h
 *
 * Author:    Ryan M. Lederman <lederman@gmail.com>
 * Copyright: Copyright (c) 2004-2023
 * Version:   0.2.0
 * License:   The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _BAL_VERSION_H_INCLUDED
# define _BAL_VERSION_H_INCLUDED

# include <stdint.h>
# include <stdbool.h>

# if defined(__cplusplus)
extern "C" {
# endif

# define BAL_GIT_COMMIT_HASH "${GIT_COMMIT_HASH}"
# define BAL_VERSION_MAJOR   ${PROJECT_VERSION_MAJOR}
# define BAL_VERSION_MINOR   ${PROJECT_VERSION_MINOR}
# define BAL_VERSION_PATCH   ${PROJECT_VERSION_PATCH}
# define BAL_VERSION_SUFFIX  "${PROJECT_VERSION_SUFFIX}"
# define BAL_IS_REL_BUILD    ${PROJECT_IS_REL_BUILD}

# define _BAL_VER2STR(n) #n
# define _BAL_MK_VERSTR(maj, min, patch) \
    _BAL_VER2STR(maj) "." _BAL_VER2STR(min) "." _BAL_VER2STR(patch) \
        BAL_VERSION_SUFFIX " (" BAL_GIT_COMMIT_HASH ")"

static inline
const char* bal_get_versionstring(void)
{
    return _BAL_MK_VERSTR(BAL_VERSION_MAJOR, BAL_VERSION_MINOR, BAL_VERSION_PATCH);
}

static inline
uint32_t bal_get_versionhex(void)
{
    return (BAL_VERSION_MAJOR << 16) | (BAL_VERSION_MINOR <<  8) |
        BAL_VERSION_PATCH;
}

static inline
bool bal_is_releasebuild(void)
{
    return BAL_IS_REL_BUILD;
}

# if defined(__cplusplus)
}
# endif

#endif /* !_BAL_VERSION_H_INCLUDED */
